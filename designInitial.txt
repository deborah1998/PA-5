

Function Name:read_in_file
Purpose:read in a file from the user and return it once they give one that exists
Parameters:None
Return:filename
Algorithm:

1.)Ask the user to input a file
2.)while the file does not exist:
    a.)ask the user to input a file
3.)return filename


Function Name:read_file
Purpose:read from the file
Parameters:filename
Return:earthquakes list
Algorithm:
1.)try
2.)Open the input file from the user.
3.)create an empty list and store it in the variable earthquakes
5.)for every line in the input  file:
    a.)strip every element in line  and then  split every element in the line at the comma, store these elements in the variable list
    b.)append the elements stored in the variable list to the empty list earthquakes
6.)close the input file
7.)except an error
    a.)output "Sorry File Not Found"
    b.)end the program
8.)return the earthquakes list



Function Name:find_earthquakes_on_date
Purpose: find and output to a file all earthquakes that occured on a specific date
Parameters:the list earthquakes,outfilename
Return:none
Algorithm:

1.)Open the output file
2.)Ask the user to input a specific date to find all earthquakes for, store result in variable earthquake _date
3.)for i in range of the length of earthquakes:
    a.)if earthquake_date equals earthquake[0](the first element in the list being the date)
          i)print earthquake[0:9](everything from the first to last element of list)
4.)close the output file



Function Name:average_magnitude
Purpose:find the average of the earthquakes in the file
Paramaters: the list earthquakes
Return:average magnitude of earthquakes in file
Algorithm:
1.)Set a  variable named  total  equal to zero
2.)Set the count equal to zero
3.)For i in range of the length of earthquakes:
    a.set total equal to the total plus earthquakes[i][4](typecast to a float)
    b.add one to count
4.)divide total by count and store the result in the variable average
5.)return average



Function Name:num_of_earthquakes_in_distance
Purpose:To find the number of earthquakes within a specific distance of a specific location
Paramaters: the list earthquakes
Return:distance calculation
Algorithm:
1.)Ask the user to input a latitude a store answer in the variable lat1
2.)Ask the user to input a longitude and store answer in the variable lon1
3.)For i in range of length of earthquakes:
    a.perform the calculation arcos(sin(lat1)*sin(int(earthquakes[1])) + cos(lat1) * cos(earthquakes[1]) * cos(lon1 - earthquakes[2])) * 6371
    *typecast list values to integers store the result in a variable named distance calculation
4.)return distance calculation



Function Name:Menu
Parameters:None
Return:chosen menu option
Algorithm:
1.)Tell the user their options for what they want to be done using information about earthquakes
2.)Ask the user to input what information they would like to know about earthquakes store result in choice
3.)if choice is dates of earthquakes:
    a.)Call the find_earthquakes_on_date function
4.)if choice is average magnitude
    a.)Call the average_magnitude function and assign the function to a variable called magnitude
    b.)Output magnitude to the user
5.)if choice is distance of earthquakes:
   a.)Call the num_of_earthquakes_in_distance function asssign the functon to a variable called earthquake_distances
   b.)Output earthquake_distances to the user
6.)otherwise:
    a.)ouput"This is an invalid choice"
7.)Ask the user if they want to choose another option store result in user answer otherwise type in the sentinel value to end the program
8.)while user answer is not yes and is not no:
    a.Ouput this is invailid option
    b.)Ask the user if they want to choose another option store result in user answer
9.)while answer is yes and not the sentininel value to end the program
    a.)Ask the user to input what information they would like to know about earthquakes store result in choice





Function Name:main
Purpose:run the overall program
Paramaters:none
Return:none
Algorithm:
1.)Output the purpose of the program to the user
2.)Call the read in file function assign it to a variable called new_file
3.)Call the read_file function, assign it to a variable called new_list
4.)Ask the user to to enter a name for the outputfile ans store answer in variable outputfile
5.)call the menu function to determine choice











